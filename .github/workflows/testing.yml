name: Testing and Quality Assurance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  lint-and-format:
    name: Code Linting and Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: |
        echo "üîç Running ESLint..."
        npm run lint
    
    - name: Check code formatting
      run: |
        echo "‚ú® Checking code formatting..."
        npx prettier --check "**/*.{js,json,md}"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests with Node.js ${{ matrix.node-version }}..."
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start application for testing
      run: |
        echo "üöÄ Starting application for integration tests..."
        npm start &
        echo $! > server.pid
        sleep 10
    
    - name: Wait for application to be ready
      run: |
        echo "‚è≥ Waiting for application to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health >/dev/null 2>&1; then
            echo "‚úÖ Application is ready!"
            break
          fi
          echo "Attempt $i/30 - waiting..."
          sleep 2
        done
    
    - name: Run API integration tests
      run: |
        echo "üîó Running API integration tests..."
        BASE_URL="http://localhost:3000"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f "$BASE_URL/health"
        
        # Test docs endpoint
        echo "Testing docs endpoint..."
        curl -f "$BASE_URL/api/docs"
        
        # Test get all comments
        echo "Testing get all comments..."
        curl -f "$BASE_URL/api/comments"
        
        # Test create comment
        echo "Testing create comment..."
        COMMENT_DATA='{"author":"Integration Test","content":"This is a test comment from integration tests"}'
        RESPONSE=$(curl -s -X POST "$BASE_URL/api/comments" \
          -H "Content-Type: application/json" \
          -d "$COMMENT_DATA")
        echo "Create response: $RESPONSE"
        
        # Extract comment ID (basic extraction)
        COMMENT_ID=$(echo $RESPONSE | grep -o '"id":[0-9]*' | grep -o '[0-9]*' | head -1)
        echo "Created comment ID: $COMMENT_ID"
        
        # Test get specific comment
        if [ ! -z "$COMMENT_ID" ]; then
          echo "Testing get specific comment..."
          curl -f "$BASE_URL/api/comments/$COMMENT_ID"
          
          # Test delete comment
          echo "Testing delete comment..."
          curl -f -X DELETE "$BASE_URL/api/comments/$COMMENT_ID"
        fi
        
        echo "‚úÖ All integration tests passed!"
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start application
      run: |
        npm start &
        echo $! > server.pid
        sleep 10
    
    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        
        # Test response times with curl
        echo "Testing API response times..."
        
        # Health endpoint test
        for i in {1..10}; do
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:3000/health)
          echo "Health endpoint response time: ${RESPONSE_TIME}s"
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ùå Health endpoint too slow: ${RESPONSE_TIME}s"
            exit 1
          fi
        done
        
        # API endpoints test
        for i in {1..5}; do
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:3000/api/comments)
          echo "API endpoint response time: ${RESPONSE_TIME}s"
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ùå API endpoint too slow: ${RESPONSE_TIME}s"
            exit 1
          fi
        done
        
        # Test concurrent requests
        echo "Testing concurrent requests..."
        for i in {1..3}; do
          curl -s http://localhost:3000/health &
          curl -s http://localhost:3000/api/comments &
        done
        wait
        
        echo "‚úÖ Performance tests completed!"
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate deployment readiness
      run: |
        echo "üîç Validating deployment readiness..."
        
        # Check if all required files exist
        echo "Checking required files..."
        test -f package.json || (echo "‚ùå package.json missing" && exit 1)
        test -f index.js || (echo "‚ùå index.js missing" && exit 1)
        test -f vercel.json || (echo "‚ùå vercel.json missing" && exit 1)
        
        # Validate package.json
        echo "Validating package.json..."
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" || (echo "‚ùå Invalid package.json" && exit 1)
        
        # Check for required scripts
        echo "Checking npm scripts..."
        npm run-script | grep -q "start" || (echo "‚ùå start script missing" && exit 1)
        npm run-script | grep -q "test" || (echo "‚ùå test script missing" && exit 1)
        
        # Validate environment compatibility
        echo "Validating Node.js compatibility..."
        node --version
        npm --version
        
        echo "‚úÖ Deployment validation passed!"
    
    - name: Create deployment artifact
      run: |
        echo "üì¶ Creating deployment artifact..."
        tar -czf deployment-artifact.tar.gz \
          package.json \
          package-lock.json \
          index.js \
          api/ \
          vercel.json \
          README.md
        
        echo "Artifact size:"
        ls -lh deployment-artifact.tar.gz
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifact
        path: deployment-artifact.tar.gz
        retention-days: 30
